{"version":3,"sources":["webpack:///webpack/bootstrap 200a8daffd302d912fe9","webpack:///./src/utils/global.js","webpack:///./src/live-on-stage.js","webpack:///./src/utils/cache.js","webpack:///./src/utils/cache-elements.js","webpack:///./src/utils/notify.js","webpack:///./src/utils/viewport.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,wC;;;;;;;;;;ACtCA;;AAEA,kC;;;;;;;;;ACFA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,kBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA,cAAa;AACb,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,gDAA+C,sBAAsB;;AAErE;AACA,gDAA+C,wBAAwB;;AAEvE;;;;;;;;;;ACpGA,qB;;;;;;;;;ACAA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAa;AACb;AACA,MAAK;;AAEL;AACA,G;;;;;;;;;ACzBA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,G;;;;;;;;;ACXA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 200a8daffd302d912fe9\n **/","var liveOnStage = require('../live-on-stage.js');\n\nwindow.liveOnStage = liveOnStage;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/global.js\n ** module id = 0\n ** module chunks = 0\n **/","\"use strict\";\n\nvar cache = require('./utils/cache.js'),\n    cacheElements = require('./utils/cache-elements.js'),\n    notify = require('./utils/notify.js'),\n    viewport = require('./utils/viewport.js'),\n    \n    liveOnStage = {\n    \n        /*\n            Check element's onScreen position\n        */\n        check: function () {\n            viewport.update();\n\n            for (var key in cache) {\n                if (cache.hasOwnProperty(key)) {\n                    this.checkCache(key);\n                }\n            }\n        },\n        \n        /*\n            Check individual cache\n            \n            @param [object]: Cache to check\n        */\n        checkCache: function (key) {\n            var thisCache = cache[key];\n\n            thisCache.elements.forEach(function (element, i) {\n                var elementIsOnStage = viewport.checkOnStage(element),\n                    stopTracking = false;\n\n                // If element is on stage and previously wasn't, fire onstage event\n                if (elementIsOnStage && !element.onScreen) {\n                    stopTracking = notify(element, true, thisCache.onStage);\n                \n                // If element isn't on stage and previously was, fire offstage event\n                } else if (!elementIsOnStage && element.onScreen) {\n                    stopTracking = notify(element, false, thisCache.offStage);\n                }\n                \n                if (stopTracking) {\n                    element.dom.setAttribute('data-stop-tracking', true);\n                    delete thisCache.elements[i];\n                }\n            });\n        },\n    \n        /*\n            Refresh cached elements\n            \n            @param [string] (optional): Name of cache to refresh\n        */\n        refresh: function (selector) {\n            // If an attribute has been provided, refresh that cache\n            if (cache[selector]) {\n                this.track(selector, cache[selector].onStage, cache[selector].offStage);\n                \n            // Or refresh all caches\n            } else {\n                for (var key in cache) {\n                    if (cache.hasOwnProperty(key)) {\n                        this.track(key, cache[key].onStage, cache[key].offStage);\n                    }\n                }\n            }\n        },\n        \n        /*\n            Track elements\n            \n            @param [string || NodeList]: CSS selector or DOM selection\n            @param [function]: Function to call when element appears on stage\n            @param [function]: Function to call when element leaves stage\n        */\n        track: function (selector, onStage, offStage) {\n            var trackElements = (typeof selector == 'string') ? document.querySelectorAll(selector) : selector;\n            \n            if (trackElements.length) {\n                viewport.update();\n\n                cache[selector] = {\n                    elements: cacheElements(trackElements),\n                    onStage: onStage,\n                    offStage: offStage\n                };\n                \n                this.check();\n            }\n        }\n    };\n\n// Check all cached elements every time the viewport changes position\nwindow.addEventListener('scroll', function () { liveOnStage.check() });\n\n// Refresh position of all elements when the screen resizes\nwindow.addEventListener('resize', function () { liveOnStage.refresh() });\n\nmodule.exports = liveOnStage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/live-on-stage.js\n ** module id = 1\n ** module chunks = 0\n **/","module.exports = {};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/cache.js\n ** module id = 2\n ** module chunks = 0\n **/","\"use strict\";\n\nvar viewport = require('./viewport.js');\n\nmodule.exports = function (elements) {\n    var elementArray = [];\n\n    [].slice.call(elements).forEach(function (element) {\n        var rect = element.getBoundingClientRect(),\n            buffer = element.getAttribute('data-buffer');\n            \n        if (element.getAttribute('data-stop-tracking') !== true) {\n            elementArray.push({\n                dom: element,\n                isOnStage: false,\n                buffer: parseInt(buffer) || 0,\n                top: rect.top + viewport.top,\n                left: rect.left + viewport.left,\n                bottom: rect.bottom + viewport.top,\n                right: rect.right + viewport.left\n            });\n        }\n    });\n    \n    return elementArray;\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/cache-elements.js\n ** module id = 3\n ** module chunks = 0\n **/","\"use strict\";\n\n/*\n    Notify DOM element of new onScreen status\n*/\nmodule.exports = function (element, isOnStage, callback) {\n    element.isOnStage = isOnStage;\n\n    if (callback) {\n        return (callback(element.dom));\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/notify.js\n ** module id = 4\n ** module chunks = 0\n **/","\"use strict\";\n\nvar docElement = document.documentElement;\n\nmodule.exports = {\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    \n    /*\n        Update viewport measurements\n    */\n    update: function () {\n        this.top = document.body.scrollTop;\n        this.left = document.body.scrollLeft;\n        this.bottom = this.top + docElement.clientHeight;\n        this.right = this.left + docElement.clientWidth;\n    },\n    \n    /*\n        Check if element is within viewport\n        \n        @param [object]: Cached element\n    */\n    checkOnStage: function (element) {\n        var buffer = element.buffer;\n    \n        return !(\n            this.bottom < (element.top - buffer) || // Element off bottom\n            this.top > (element.bottom + buffer) || // Element off top\n            this.left > (element.right + buffer) || // Element off left\n            this.right < (element.left - buffer)    // Element off right\n        );\n    }\n};\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/utils/viewport.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"live-on-stage.global.js"}